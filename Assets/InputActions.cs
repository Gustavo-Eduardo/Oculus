//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""e4c5478b-23e6-4979-9309-69a12566b7d6"",
            ""actions"": [
                {
                    ""name"": ""RespawnObject"",
                    ""type"": ""Button"",
                    ""id"": ""913cdca7-89a2-4ebc-9548-2c2f1f9355d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""554a266a-97b8-47e7-99af-972ed3f9bbb9"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RespawnObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Confirmation"",
            ""id"": ""03d23132-1313-474f-b913-75072df86932"",
            ""actions"": [
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""25d11353-006e-484a-a199-c8c82d5ae146"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""0e88911b-5616-49d4-8967-134751f25769"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19436dcf-bc23-4b9e-beff-0ebcdf0df213"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76bbca46-c484-4c81-8c68-d28a1143c6d1"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GenerationRecording"",
            ""id"": ""79050304-3d4b-4adc-bc5d-ac267e209a49"",
            ""actions"": [
                {
                    ""name"": ""Record"",
                    ""type"": ""Button"",
                    ""id"": ""89520b64-966f-49be-94a6-c6cedcb47e28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""524ac669-78d5-42fe-a207-d9f6552286fc"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Record"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ChatRecording"",
            ""id"": ""a27d9b25-6de8-488b-b66b-54ac94df623d"",
            ""actions"": [
                {
                    ""name"": ""Record"",
                    ""type"": ""Button"",
                    ""id"": ""217e13bb-4b1f-4a88-b3e4-66f71bdfc4af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1e0f8d38-8673-44f0-8743-7f9c6a60ee29"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Record"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HoldingObject"",
            ""id"": ""5163bf97-9843-446a-8bf3-e51c3dbdafbb"",
            ""actions"": [
                {
                    ""name"": ""Destroy"",
                    ""type"": ""Button"",
                    ""id"": ""472f7428-1796-4c40-a299-876f47785dc5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""281bc0b2-8983-4013-952a-b77f527fb60b"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destroy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_RespawnObject = m_Main.FindAction("RespawnObject", throwIfNotFound: true);
        // Confirmation
        m_Confirmation = asset.FindActionMap("Confirmation", throwIfNotFound: true);
        m_Confirmation_Cancel = m_Confirmation.FindAction("Cancel", throwIfNotFound: true);
        m_Confirmation_Confirm = m_Confirmation.FindAction("Confirm", throwIfNotFound: true);
        // GenerationRecording
        m_GenerationRecording = asset.FindActionMap("GenerationRecording", throwIfNotFound: true);
        m_GenerationRecording_Record = m_GenerationRecording.FindAction("Record", throwIfNotFound: true);
        // ChatRecording
        m_ChatRecording = asset.FindActionMap("ChatRecording", throwIfNotFound: true);
        m_ChatRecording_Record = m_ChatRecording.FindAction("Record", throwIfNotFound: true);
        // HoldingObject
        m_HoldingObject = asset.FindActionMap("HoldingObject", throwIfNotFound: true);
        m_HoldingObject_Destroy = m_HoldingObject.FindAction("Destroy", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_RespawnObject;
    public struct MainActions
    {
        private @InputActions m_Wrapper;
        public MainActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RespawnObject => m_Wrapper.m_Main_RespawnObject;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @RespawnObject.started += instance.OnRespawnObject;
            @RespawnObject.performed += instance.OnRespawnObject;
            @RespawnObject.canceled += instance.OnRespawnObject;
        }

        private void UnregisterCallbacks(IMainActions instance)
        {
            @RespawnObject.started -= instance.OnRespawnObject;
            @RespawnObject.performed -= instance.OnRespawnObject;
            @RespawnObject.canceled -= instance.OnRespawnObject;
        }

        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActions @Main => new MainActions(this);

    // Confirmation
    private readonly InputActionMap m_Confirmation;
    private List<IConfirmationActions> m_ConfirmationActionsCallbackInterfaces = new List<IConfirmationActions>();
    private readonly InputAction m_Confirmation_Cancel;
    private readonly InputAction m_Confirmation_Confirm;
    public struct ConfirmationActions
    {
        private @InputActions m_Wrapper;
        public ConfirmationActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cancel => m_Wrapper.m_Confirmation_Cancel;
        public InputAction @Confirm => m_Wrapper.m_Confirmation_Confirm;
        public InputActionMap Get() { return m_Wrapper.m_Confirmation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConfirmationActions set) { return set.Get(); }
        public void AddCallbacks(IConfirmationActions instance)
        {
            if (instance == null || m_Wrapper.m_ConfirmationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ConfirmationActionsCallbackInterfaces.Add(instance);
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
        }

        private void UnregisterCallbacks(IConfirmationActions instance)
        {
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
        }

        public void RemoveCallbacks(IConfirmationActions instance)
        {
            if (m_Wrapper.m_ConfirmationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IConfirmationActions instance)
        {
            foreach (var item in m_Wrapper.m_ConfirmationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ConfirmationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ConfirmationActions @Confirmation => new ConfirmationActions(this);

    // GenerationRecording
    private readonly InputActionMap m_GenerationRecording;
    private List<IGenerationRecordingActions> m_GenerationRecordingActionsCallbackInterfaces = new List<IGenerationRecordingActions>();
    private readonly InputAction m_GenerationRecording_Record;
    public struct GenerationRecordingActions
    {
        private @InputActions m_Wrapper;
        public GenerationRecordingActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Record => m_Wrapper.m_GenerationRecording_Record;
        public InputActionMap Get() { return m_Wrapper.m_GenerationRecording; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GenerationRecordingActions set) { return set.Get(); }
        public void AddCallbacks(IGenerationRecordingActions instance)
        {
            if (instance == null || m_Wrapper.m_GenerationRecordingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GenerationRecordingActionsCallbackInterfaces.Add(instance);
            @Record.started += instance.OnRecord;
            @Record.performed += instance.OnRecord;
            @Record.canceled += instance.OnRecord;
        }

        private void UnregisterCallbacks(IGenerationRecordingActions instance)
        {
            @Record.started -= instance.OnRecord;
            @Record.performed -= instance.OnRecord;
            @Record.canceled -= instance.OnRecord;
        }

        public void RemoveCallbacks(IGenerationRecordingActions instance)
        {
            if (m_Wrapper.m_GenerationRecordingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGenerationRecordingActions instance)
        {
            foreach (var item in m_Wrapper.m_GenerationRecordingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GenerationRecordingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GenerationRecordingActions @GenerationRecording => new GenerationRecordingActions(this);

    // ChatRecording
    private readonly InputActionMap m_ChatRecording;
    private List<IChatRecordingActions> m_ChatRecordingActionsCallbackInterfaces = new List<IChatRecordingActions>();
    private readonly InputAction m_ChatRecording_Record;
    public struct ChatRecordingActions
    {
        private @InputActions m_Wrapper;
        public ChatRecordingActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Record => m_Wrapper.m_ChatRecording_Record;
        public InputActionMap Get() { return m_Wrapper.m_ChatRecording; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChatRecordingActions set) { return set.Get(); }
        public void AddCallbacks(IChatRecordingActions instance)
        {
            if (instance == null || m_Wrapper.m_ChatRecordingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChatRecordingActionsCallbackInterfaces.Add(instance);
            @Record.started += instance.OnRecord;
            @Record.performed += instance.OnRecord;
            @Record.canceled += instance.OnRecord;
        }

        private void UnregisterCallbacks(IChatRecordingActions instance)
        {
            @Record.started -= instance.OnRecord;
            @Record.performed -= instance.OnRecord;
            @Record.canceled -= instance.OnRecord;
        }

        public void RemoveCallbacks(IChatRecordingActions instance)
        {
            if (m_Wrapper.m_ChatRecordingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChatRecordingActions instance)
        {
            foreach (var item in m_Wrapper.m_ChatRecordingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChatRecordingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChatRecordingActions @ChatRecording => new ChatRecordingActions(this);

    // HoldingObject
    private readonly InputActionMap m_HoldingObject;
    private List<IHoldingObjectActions> m_HoldingObjectActionsCallbackInterfaces = new List<IHoldingObjectActions>();
    private readonly InputAction m_HoldingObject_Destroy;
    public struct HoldingObjectActions
    {
        private @InputActions m_Wrapper;
        public HoldingObjectActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Destroy => m_Wrapper.m_HoldingObject_Destroy;
        public InputActionMap Get() { return m_Wrapper.m_HoldingObject; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HoldingObjectActions set) { return set.Get(); }
        public void AddCallbacks(IHoldingObjectActions instance)
        {
            if (instance == null || m_Wrapper.m_HoldingObjectActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HoldingObjectActionsCallbackInterfaces.Add(instance);
            @Destroy.started += instance.OnDestroy;
            @Destroy.performed += instance.OnDestroy;
            @Destroy.canceled += instance.OnDestroy;
        }

        private void UnregisterCallbacks(IHoldingObjectActions instance)
        {
            @Destroy.started -= instance.OnDestroy;
            @Destroy.performed -= instance.OnDestroy;
            @Destroy.canceled -= instance.OnDestroy;
        }

        public void RemoveCallbacks(IHoldingObjectActions instance)
        {
            if (m_Wrapper.m_HoldingObjectActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHoldingObjectActions instance)
        {
            foreach (var item in m_Wrapper.m_HoldingObjectActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HoldingObjectActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HoldingObjectActions @HoldingObject => new HoldingObjectActions(this);
    public interface IMainActions
    {
        void OnRespawnObject(InputAction.CallbackContext context);
    }
    public interface IConfirmationActions
    {
        void OnCancel(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
    }
    public interface IGenerationRecordingActions
    {
        void OnRecord(InputAction.CallbackContext context);
    }
    public interface IChatRecordingActions
    {
        void OnRecord(InputAction.CallbackContext context);
    }
    public interface IHoldingObjectActions
    {
        void OnDestroy(InputAction.CallbackContext context);
    }
}
